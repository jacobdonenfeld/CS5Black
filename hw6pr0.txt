The first issue potentially with subroutines is the time lost performing duplicate data transfers. This would be from compilers having to compile computer programs until it reaches the computer hardware to get processed through the computer. This does pose a small issue but the speed in which computers operate at is great enough to render this computation speed negligible. The tradeoff given to write programs in code language infinitely more familiar to programmers allows for much greater and more diverse programs to be made. The second issue also stands as a benefit. If a desired subroutine doesn’t exist, it would have to be programmed. In this case, it would be added to the computers library. If this library is shared between programmers, this then does not ever have to be written again and is available for use in the future without having to be written. This allows for collaboration and communal improvement while finding the broad functionality computers lack and fixing it. This doesn’t pose an issue today and in fact helps computer programs become stronger and well-grounded in functionality.
Another benefit to programming in python or any higher-level programming is automatic memory management. The user does not have to consider function calls on the stack and can focus more on the algorithmic side of programming. Computer optimization with all parts of the hardware is undoubtedly extensive in code. Being able to reuse this and implement it onto all programs allows long and complex algorithmic code dealing with computer hardware to exist and apply to programs without ever having to touch it.
